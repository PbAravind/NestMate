name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
    
    - name: Run tests
      working-directory: ./backend
      run: go test -v ./...
    
    - name: Run linter
      working-directory: ./backend
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run
    
    - name: Build
      working-directory: ./backend
      run: go build -v ./cmd/server

  # Web App Tests
  web-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install dependencies
      working-directory: ./web
      run: npm ci
    
    - name: Run tests
      working-directory: ./web
      run: npm test -- --coverage --watchAll=false
    
    - name: Run linter
      working-directory: ./web
      run: npm run lint || true
    
    - name: Build
      working-directory: ./web
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: web/build/

  # Mobile App Tests (React Native)
  mobile-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: NestMateMobile/package.json
    
    - name: Install dependencies
      working-directory: ./NestMateMobile
      run: npm install
    
    - name: Run type check
      working-directory: ./NestMateMobile
      run: npm run type-check
    
    - name: Run tests
      working-directory: ./NestMateMobile
      run: npm test || true
    
    - name: Run linter
      working-directory: ./NestMateMobile
      run: npm run lint || true

  # Docker Build Test
  docker-test:
    runs-on: ubuntu-latest
    needs: [backend-test, web-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: nestmate-backend:test
    
    - name: Build web Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        push: false
        tags: nestmate-web:test

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, web-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d --build
        sleep 30
    
    - name: Run health checks
      run: |
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:3000 || exit 1
    
    - name: Stop services
      run: docker-compose down